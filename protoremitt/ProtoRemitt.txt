pragma solidity ^0.4.10;

contract Remittance {
    address owner;
    bool public isRunning;
    uint public remittanceInProgress;
    uint deployPrice;
    uint public contractCommision;
    uint public claimAttempts;
    uint public remitIdCount;
    uint public duration;
  
    //uint public coolOffDuration;
    //uint  public duration;
    
    struct RemitStruct { 
        address     depositor;
        address     exchanger;
        uint        amountDue;
        uint        amountClaimed;
        bytes32     passwordHash;
        uint        deadline;
        bool        isActive;
    }
    
    mapping (uint => RemitStruct) public remitStructs;
    
    event LogSuccessfullyDeposited(uint remitId, uint amount);
    event LogSuccessfullyClaimed(address claimant, uint amount);
    
    modifier adminOnlyAccess() {  
        require(msg.sender == owner);
        _;
    }
    
    modifier contractIsActive(){
        require(isRunning == true );
        _;
    }
    
    function Remittance() {
        isRunning = true;
        owner = msg.sender;
        //capture deploy gas price
       // contractCommision =  function of deployPrice - fixed offset amount
    }
    
    function deposit(address _exchanger, bytes32 _depositorPassword, 
                        bytes32 _receiverPassword )
        public 
        payable
        contractIsActive
        returns (bool success)
    {
        if( _exchanger != address(0)) revert();
        //Trim passwords ?
        // if  (blockNumber + duration > current block number) throw;
        if (msg.value < contractCommision) throw;
        // contractCommision =  function of deployPrice -set amount
       
       
        remitIdCount++;
        var amountToDeposit = (msg.value - contractCommision);
        RemitStruct memory newRemit = RemitStruct(msg.sender,
                                                _exchanger,
                                                amountToDeposit,
                                                0, 
                                                keccak256(_depositorPassword, _receiverPassword),
                                                block.number + duration,
                                                true);
        remitStructs[remitIdCount] = newRemit;
            
        // add deposit to 'Escrow' struct
        
        LogSuccessfullyDeposited(remitIdCount, amountToDeposit);
        remittanceInProgress++;
        return true;
    }
    
    
    function claim(uint _remitId, bytes32 _depositorPassword, bytes32 _receiverPassword)
        public
        contractIsActive 
        returns (bool success)
    {
        //if remittance is invalid throw
        if(isValidRemittance(_remitId) == false) throw;
       
        if( (isDepositorAddress(_remitId, msg.sender))   ||  (isExchangerAddress(_remitId, msg.sender)) ) throw;
        
        //if depositor tries to claim BEFORE deadline, throw
        if( !isPastDeadline( _remitId) && isDepositorAddress(_remitId, msg.sender) ) throw;
        
        //if exhanger tries to claim after deadline, throw
        if( isPastDeadline( _remitId) && isExchangerAddress(_remitId, msg.sender) ) throw;
        
        //verify passwords
        if (keccak256(_depositorPassword, _receiverPassword) != fetchPasswordHash(_remitId)) throw;
        
        
        //Empty 'Escrow' struct and settle remit
       var amountToClaim = remitStructs[_remitId].amountDue ;
       if(amountToClaim == 0) throw;
        remitStructs[_remitId].amountDue        -= amountToClaim;
        remitStructs[_remitId].amountClaimed    += amountToClaim;
        
         //prevent re-entrancy and allocate amounts
        if(!msg.sender.send(amountToClaim)) throw;
        
       LogSuccessfullyClaimed(msg.sender, fetchAmountDue(_remitId));
       retireRemit(_remitId);
        
        return true;
    }
    
    //Maintainance methods
    
     function isValidRemittance(uint _id)
        public 
        constant
        returns (bool status)
    {
        return remitStructs[_id].isActive;
    }
    
    function fetchPasswordHash(uint _id)
        public 
        constant
        returns (bytes32 hash)
    {
         return remitStructs[_id].passwordHash;
    }
    
     function fetchAmountDue(uint _id)
        public 
        constant
        returns (uint due)
    {
         return  remitStructs[_id].amountDue;
    }
    
    function isDepositorAddress(uint _id, address depositor)
        public 
        constant
        returns (bool success )
    {
         return  !(remitStructs[_id].depositor != depositor );
    }
    
     function isExchangerAddress(uint _id, address exchanger)
        public 
        constant
        returns (bool success)
    {
        return  !(remitStructs[_id].exchanger != exchanger) ;
    }
    
    function isPastDeadline(uint _id)
        public
        constant
        returns (bool success)
    {
        return remitStructs[_id].deadline > block.number ;
    }
    
    
    
    function retireRemit(uint _id)
        private
        contractIsActive
    {
        remitStructs[_id].isActive = false;
        if(remittanceInProgress > 0) {remittanceInProgress--;}
    }
    
    
    function switchRunning(bool onOff)
        adminOnlyAccess
        public 
    {
       if(remittanceInProgress == 0){
         isRunning =  onOff; 
       }
    }
    
    function Kill()
        adminOnlyAccess
        public
    {
        suicide(owner);
    }
    
    function () {}
}
